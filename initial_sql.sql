USE CATALOG main;
DROP SCHEMA IF EXISTS iot_dashboard_dev_lb CASCADE;
DROP SCHEMA IF EXISTS iot_dashboard_prod_lb CASCADE;
CREATE SCHEMA IF NOT EXISTS iot_dashboard_dev_lb;
CREATE SCHEMA IF NOT EXISTS iot_dashboard_prod_lb;
USE SCHEMA iot_dashboard_prod_lb;



CREATE TABLE IF NOT EXISTS bronze_sensors
(
Id BIGINT GENERATED BY DEFAULT AS IDENTITY,
device_id INT,
user_id INT,
calories_burnt DECIMAL(10,2), 
miles_walked DECIMAL(10,2), 
num_steps DECIMAL(10,2), 
timestamp TIMESTAMP,
value STRING
)
CLUSTER BY (user_id, device_id)
;

CREATE TABLE IF NOT EXISTS bronze_users
(
userid BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
gender STRING,
age INT,
height DECIMAL(10,2), 
weight DECIMAL(10,2),
smoker STRING,
familyhistory STRING,
cholestlevs STRING,
bp STRING,
risk DECIMAL(10,2),
update_timestamp TIMESTAMP
)
CLUSTER BY (userid)
;

-- Silver Layer

CREATE TABLE IF NOT EXISTS silver_users
(
userid BIGINT GENERATED BY DEFAULT AS IDENTITY,
gender STRING,
age INT,
height DECIMAL(10,2), 
weight DECIMAL(10,2),
smoker STRING,
familyhistory STRING,
cholestlevs STRING,
bp STRING,
risk DECIMAL(10,2),
update_timestamp TIMESTAMP,
historical_events_array ARRAY<INT>,
historical_events_map MAP<INT, STRING>,
historical_events_struct STRUCT<id:string, name:string>,
 CONSTRAINT pk_user PRIMARY KEY (userid) -- Documented relationship
)
CLUSTER BY (userid)
;

CREATE TABLE IF NOT EXISTS silver_sensors
(
Id BIGINT GENERATED BY DEFAULT AS IDENTITY,
device_id INT,
user_id BIGINT,
calories_burnt DECIMAL(10,2), 
miles_walked DECIMAL(10,2), 
num_steps DECIMAL(10,2), 
timestamp TIMESTAMP,
value STRING,
CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES silver_users(userid) -- Documented relationship
)
CLUSTER BY (user_id, device_id)
;

-- Gold Layer

CREATE OR REPLACE TABLE hourly_summary_statistics
CLUSTER BY (HourBucket, user_id)
AS
(SELECT user_id,
date_trunc('hour', timestamp) AS HourBucket,
AVG(num_steps)::float AS AvgNumStepsAcrossDevices,
AVG(calories_burnt)::float AS AvgCaloriesBurnedAcrossDevices,
AVG(miles_walked)::float AS AvgMilesWalkedAcrossDevices
FROM silver_sensors
GROUP BY user_id,date_trunc('hour', timestamp)
);



CREATE OR REPLACE VIEW smoothed_hourly_statistics
AS 
SELECT *,
-- Number of Steps
(avg(`AvgNumStepsAcrossDevices`) OVER (PARTITION BY user_id
        ORDER BY `HourBucket`
        ROWS BETWEEN
          4 PRECEDING AND
          CURRENT ROW
      )) ::float AS SmoothedNumSteps4HourMA, -- 4 hour moving average
      
(avg(`AvgNumStepsAcrossDevices`) OVER (PARTITION BY user_id
        ORDER BY `HourBucket`
        ROWS BETWEEN
          24 PRECEDING AND
          CURRENT ROW
      ))::float AS SmoothedNumSteps12HourMA --24 hour moving average
,
-- Calories Burned
(avg(`AvgCaloriesBurnedAcrossDevices`) OVER (PARTITION BY user_id
        ORDER BY `HourBucket`
        ROWS BETWEEN
          4 PRECEDING AND
          CURRENT ROW
      ))::float AS SmoothedCalsBurned4HourMA, -- 4 hour moving average
      
(avg(`AvgCaloriesBurnedAcrossDevices`) OVER (PARTITION BY user_id
        ORDER BY `HourBucket`
        ROWS BETWEEN
          24 PRECEDING AND
          CURRENT ROW
      ))::float AS SmoothedCalsBurned12HourMA --24 hour moving average,
,
-- Miles Walked
(avg(`AvgMilesWalkedAcrossDevices`) OVER (PARTITION BY user_id
        ORDER BY `HourBucket`
        ROWS BETWEEN
          4 PRECEDING AND
          CURRENT ROW
      ))::float AS SmoothedMilesWalked4HourMA, -- 4 hour moving average
      
(avg(`AvgMilesWalkedAcrossDevices`) OVER (PARTITION BY user_id
        ORDER BY `HourBucket`
        ROWS BETWEEN
          24 PRECEDING AND
          CURRENT ROW
      ))::float AS SmoothedMilesWalked12HourMA --24 hour moving average
FROM hourly_summary_statistics;





--- NEW Changes post PROD deployements

-- Add columns / changes in DEV
/*
ALTER TABLE bronze_sensors ADD COLUMN new_metadata_column STRUCT<ID string, name string>;
ALTER TABLE silver_sensors ADD COLUMN new_column ARRAY<int>;
ALTER TABLE silver_sensors ADD COLUMN my_name STRING;
ALTER TABLE silver_sensors ADD COLUMN my_dub DOUBLE;
ALTER TABLE silver_sensors ADD COLUMN my_fl FLOAT;
ALTER TABLE silver_sensors ADD COLUMN my_bin BINARY;
ALTER TABLE silver_sensors ADD COLUMN my_tiny TINYINT;



*/
-- Add new column in demo to steps